/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type {ColumnType} from 'kysely';


export type AdminActionType = 'Change Privileges';

export type EntityType = 'Author' | 'Edition' | 'EditionGroup' | 'Publisher' | 'Series' | 'Work';

export type ExternalServiceOauthType = 'critiquebrainz';

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type LangProficiency = 'ADVANCED' | 'BASIC' | 'INTERMEDIATE' | 'NATIVE';

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface AchievementType {
  badgeUrl: string | null;
  description: string;
  id: Generated<number>;
  name: string;
}

export interface AchievementUnlock {
  achievementId: number;
  editorId: number;
  id: Generated<number>;
  profileRank: number | null;
  unlockedAt: Generated<Timestamp>;
}

export interface AdminLog {
  actionType: AdminActionType;
  adminId: number;
  id: Generated<number>;
  newPrivs: number | null;
  note: string;
  oldPrivs: number | null;
  targetUserId: number;
  time: Generated<Timestamp>;
}

export interface Alias {
  id: Generated<number>;
  languageId: number | null;
  name: string;
  primary: Generated<boolean>;
  sortName: string;
}

export interface AliasSet {
  defaultAliasId: number | null;
  id: Generated<number>;
}

export interface AliasSetAlias {
  aliasId: number;
  setId: number;
}

export interface Annotation {
  content: string;
  id: Generated<number>;
  lastRevisionId: number | null;
}

export interface Author {
  aliasSetId: number | null;
  annotationId: number | null;
  areaId: number | null;
  authorType: string | null;
  bbid: string | null;
  beginAreaId: number | null;
  beginDay: number | null;
  beginMonth: number | null;
  beginYear: number | null;
  dataId: number | null;
  defaultAliasId: number | null;
  disambiguation: string | null;
  disambiguationId: number | null;
  endAreaId: number | null;
  endDay: number | null;
  ended: boolean | null;
  endMonth: number | null;
  endYear: number | null;
  genderId: number | null;
  identifierSetId: number | null;
  master: boolean | null;
  name: string | null;
  relationshipSetId: number | null;
  revisionId: number | null;
  sortName: string | null;
  type: EntityType | null;
  typeId: number | null;
}

export interface AuthorCredit {
  authorCount: number;
  beginPhrase: Generated<string>;
  id: Generated<number>;
  refCount: Generated<number>;
}

export interface AuthorCreditName {
  authorBbid: string;
  authorCreditId: number;
  joinPhrase: string;
  name: string;
  position: number;
}

export interface AuthorData {
  aliasSetId: number;
  annotationId: number | null;
  areaId: number | null;
  beginAreaId: number | null;
  beginDay: number | null;
  beginMonth: number | null;
  beginYear: number | null;
  disambiguationId: number | null;
  endAreaId: number | null;
  endDay: number | null;
  ended: Generated<boolean>;
  endMonth: number | null;
  endYear: number | null;
  genderId: number | null;
  id: Generated<number>;
  identifierSetId: number | null;
  relationshipSetId: number | null;
  typeId: number | null;
}

export interface AuthorHeader {
  bbid: string;
  masterRevisionId: number | null;
}

export interface AuthorImport {
  aliasSetId: number | null;
  annotationId: number | null;
  areaId: number | null;
  authorType: string | null;
  bbid: string | null;
  beginAreaId: number | null;
  beginDay: number | null;
  beginMonth: number | null;
  beginYear: number | null;
  dataId: number | null;
  defaultAliasId: number | null;
  disambiguation: string | null;
  disambiguationId: number | null;
  endAreaId: number | null;
  endDay: number | null;
  ended: boolean | null;
  endMonth: number | null;
  endYear: number | null;
  genderId: number | null;
  identifierSetId: number | null;
  master: boolean | null;
  name: string | null;
  relationshipSetId: number | null;
  revisionId: number | null;
  sortName: string | null;
  type: EntityType | null;
  typeId: number | null;
}

export interface AuthorImportHeader {
  bbid: string;
  dataId: number;
}

export interface AuthorRevision {
  bbid: string;
  dataId: number | null;
  id: number;
  isMerge: Generated<boolean>;
}

export interface AuthorType {
  id: Generated<number>;
  label: string;
}

export interface Disambiguation {
  comment: string;
  id: Generated<number>;
}

export interface DiscardVotes {
  editorId: number;
  importBbid: string;
  votedAt: Generated<Timestamp>;
}

export interface Edition {
  aliasSetId: number | null;
  annotationId: number | null;
  authorCreditId: number | null;
  bbid: string | null;
  dataId: Generated<number | null>;
  defaultAliasId: number | null;
  depth: number | null;
  disambiguation: string | null;
  disambiguationId: number | null;
  editionGroupBbid: string | null;
  formatId: Generated<number | null>;
  height: number | null;
  identifierSetId: number | null;
  languageSetId: number | null;
  master: boolean | null;
  name: string | null;
  pages: number | null;
  publisherSetId: number | null;
  relationshipSetId: number | null;
  releaseEventSetId: number | null;
  revisionId: number | null;
  sortName: string | null;
  statusId: Generated<number | null>;
  type: EntityType | null;
  weight: number | null;
  width: number | null;
}

export interface EditionData {
  aliasSetId: number;
  annotationId: number | null;
  authorCreditId: number | null;
  depth: number | null;
  disambiguationId: number | null;
  editionGroupBbid: string | null;
  formatId: number | null;
  height: number | null;
  id: Generated<number>;
  identifierSetId: number | null;
  languageSetId: number | null;
  pages: number | null;
  publisherSetId: number | null;
  relationshipSetId: number | null;
  releaseEventSetId: number | null;
  statusId: number | null;
  weight: number | null;
  width: number | null;
}

export interface EditionFormat {
  id: Generated<number>;
  label: string;
}

export interface EditionGroup {
  aliasSetId: number | null;
  annotationId: number | null;
  authorCreditId: number | null;
  bbid: string | null;
  dataId: number | null;
  defaultAliasId: number | null;
  disambiguation: string | null;
  disambiguationId: number | null;
  editionGroupType: string | null;
  identifierSetId: number | null;
  master: boolean | null;
  name: string | null;
  relationshipSetId: number | null;
  revisionId: number | null;
  sortName: string | null;
  type: EntityType | null;
  typeId: number | null;
}

export interface EditionGroupData {
  aliasSetId: number;
  annotationId: number | null;
  authorCreditId: number | null;
  disambiguationId: number | null;
  id: Generated<number>;
  identifierSetId: number | null;
  relationshipSetId: number | null;
  typeId: number | null;
}

export interface EditionGroupHeader {
  bbid: string;
  masterRevisionId: number | null;
}

export interface EditionGroupImport {
  aliasSetId: number | null;
  annotationId: number | null;
  authorCreditId: number | null;
  bbid: string | null;
  dataId: number | null;
  defaultAliasId: number | null;
  disambiguation: string | null;
  disambiguationId: number | null;
  editionGroupType: string | null;
  identifierSetId: number | null;
  master: boolean | null;
  name: string | null;
  relationshipSetId: number | null;
  revisionId: number | null;
  sortName: string | null;
  type: EntityType | null;
  typeId: number | null;
}

export interface EditionGroupImportHeader {
  bbid: string;
  dataId: number;
}

export interface EditionGroupRevision {
  bbid: string;
  dataId: number | null;
  id: number;
  isMerge: Generated<boolean>;
}

export interface EditionGroupType {
  id: Generated<number>;
  label: string;
}

export interface EditionHeader {
  bbid: string;
  masterRevisionId: number | null;
}

export interface EditionImport {
  aliasSetId: number | null;
  annotationId: number | null;
  authorCreditId: number | null;
  bbid: string | null;
  dataId: number | null;
  defaultAliasId: number | null;
  depth: number | null;
  disambiguation: string | null;
  disambiguationId: number | null;
  editionGroupBbid: string | null;
  formatId: number | null;
  height: number | null;
  identifierSetId: number | null;
  languageSetId: number | null;
  master: boolean | null;
  name: string | null;
  pages: number | null;
  publisherSetId: number | null;
  relationshipSetId: number | null;
  releaseEventSetId: number | null;
  revisionId: number | null;
  sortName: string | null;
  statusId: number | null;
  type: EntityType | null;
  weight: number | null;
  width: number | null;
}

export interface EditionImportHeader {
  bbid: string;
  dataId: number;
}

export interface EditionRevision {
  bbid: string;
  dataId: number | null;
  id: number;
  isMerge: Generated<boolean>;
}

export interface EditionStatus {
  id: Generated<number>;
  label: string;
}

export interface Editor {
  activeAt: Generated<Timestamp>;
  areaId: number | null;
  bio: Generated<string>;
  cachedMetabrainzName: string | null;
  createdAt: Generated<Timestamp>;
  genderId: number | null;
  id: Generated<number>;
  metabrainzUserId: number | null;
  name: string;
  privs: Generated<number>;
  reputation: Generated<number>;
  revisionsApplied: Generated<number>;
  revisionsReverted: Generated<number>;
  titleUnlockId: number | null;
  totalRevisions: Generated<number>;
  typeId: Generated<number>;
}

export interface EditorLanguage {
  editorId: number;
  languageId: number;
  proficiency: LangProficiency;
}

export interface EditorType {
  id: Generated<number>;
  label: string;
}

export interface Entity {
  bbid: Generated<string>;
  isImport: Generated<boolean>;
  type: EntityType;
}

export interface EntityRedirect {
  sourceBbid: string;
  targetBbid: string;
}

export interface ExternalServiceOauth {
  accessToken: string;
  editorId: number;
  id: Generated<number>;
  refreshToken: string | null;
  scopes: string[] | null;
  service: ExternalServiceOauthType;
  tokenExpires: Timestamp | null;
}

export interface ExternalSource {
  id: Generated<number>;
  name: string;
}

export interface Identifier {
  id: Generated<number>;
  typeId: Generated<number>;
  value: string;
}

export interface IdentifierSet {
  id: Generated<number>;
}

export interface IdentifierSetIdentifier {
  identifierId: number;
  setId: number;
}

export interface IdentifierType {
  childOrder: Generated<number>;
  deprecated: Generated<boolean>;
  description: string;
  detectionRegex: string | null;
  displayTemplate: string;
  entityType: EntityType;
  id: Generated<number>;
  label: string;
  parentId: number | null;
  validationRegex: string;
}

export interface ImportMetadata {
  acceptedEntityBbid: string | null;
  additionalData: Json | null;
  externalIdentifier: string;
  externalSourceId: number;
  importedAt: Generated<Timestamp>;
  lastEdited: Timestamp | null;
  pendingEntityBbid: string | null;
}

export interface LanguageSet {
  id: Generated<number>;
}

export interface LanguageSetLanguage {
  languageId: number;
  setId: number;
}

export interface MusicbrainzArea {
  beginDateDay: number | null;
  beginDateMonth: number | null;
  beginDateYear: number | null;
  comment: Generated<string>;
  editsPending: Generated<number>;
  endDateDay: number | null;
  endDateMonth: number | null;
  endDateYear: number | null;
  ended: Generated<boolean>;
  gid: string;
  id: Generated<number>;
  lastUpdated: Generated<Timestamp | null>;
  name: string;
  type: number | null;
}

export interface MusicbrainzAreaType {
  childOrder: Generated<number>;
  description: string | null;
  id: Generated<number>;
  name: string;
  parent: number | null;
}

export interface MusicbrainzCountryArea {
  area: number;
}

export interface MusicbrainzGender {
  childOrder: Generated<number>;
  description: string | null;
  id: Generated<number>;
  name: string;
  parent: number | null;
}

export interface MusicbrainzLanguage {
  frequency: Generated<number>;
  id: Generated<number>;
  isoCode1: string | null;
  isoCode2b: string | null;
  isoCode2t: string | null;
  isoCode3: string | null;
  name: string;
}

export interface MusicbrainzReplicationControl {
  currentReplicationSequence: number | null;
  currentSchemaSequence: number;
  id: Generated<number>;
  lastReplicationDate: Timestamp | null;
}

export interface Note {
  authorId: number;
  content: string;
  id: Generated<number>;
  postedAt: Generated<Timestamp>;
  revisionId: number;
}

export interface Publisher {
  aliasSetId: number | null;
  annotationId: number | null;
  areaId: number | null;
  bbid: string | null;
  beginDay: number | null;
  beginMonth: number | null;
  beginYear: number | null;
  dataId: Generated<number | null>;
  defaultAliasId: number | null;
  disambiguation: string | null;
  disambiguationId: number | null;
  endDay: number | null;
  ended: boolean | null;
  endMonth: number | null;
  endYear: number | null;
  identifierSetId: number | null;
  master: boolean | null;
  name: string | null;
  publisherType: string | null;
  relationshipSetId: number | null;
  revisionId: number | null;
  sortName: string | null;
  type: EntityType | null;
  typeId: Generated<number | null>;
}

export interface PublisherData {
  aliasSetId: number;
  annotationId: number | null;
  areaId: number | null;
  beginDay: number | null;
  beginMonth: number | null;
  beginYear: number | null;
  disambiguationId: number | null;
  endDay: number | null;
  ended: Generated<boolean>;
  endMonth: number | null;
  endYear: number | null;
  id: Generated<number>;
  identifierSetId: number | null;
  relationshipSetId: number | null;
  typeId: number | null;
}

export interface PublisherHeader {
  bbid: string;
  masterRevisionId: number | null;
}

export interface PublisherImport {
  aliasSetId: number | null;
  annotationId: number | null;
  areaId: number | null;
  bbid: string | null;
  beginDay: number | null;
  beginMonth: number | null;
  beginYear: number | null;
  dataId: number | null;
  defaultAliasId: number | null;
  disambiguation: string | null;
  disambiguationId: number | null;
  endDay: number | null;
  ended: boolean | null;
  endMonth: number | null;
  endYear: number | null;
  identifierSetId: number | null;
  master: boolean | null;
  name: string | null;
  publisherType: string | null;
  relationshipSetId: number | null;
  revisionId: number | null;
  sortName: string | null;
  type: EntityType | null;
  typeId: number | null;
}

export interface PublisherImportHeader {
  bbid: string;
  dataId: number;
}

export interface PublisherRevision {
  bbid: string;
  dataId: number | null;
  id: number;
  isMerge: Generated<boolean>;
}

export interface PublisherSet {
  id: Generated<number>;
}

export interface PublisherSetPublisher {
  publisherBbid: string;
  setId: number;
}

export interface PublisherType {
  id: Generated<number>;
  label: string;
}

export interface Relationship {
  attributeSetId: Generated<number | null>;
  id: Generated<number>;
  sourceBbid: string;
  targetBbid: string;
  typeId: Generated<number>;
}

export interface RelationshipAttribute {
  attributeType: number;
  id: Generated<number>;
}

export interface RelationshipAttributeSet {
  id: Generated<number>;
}

export interface RelationshipAttributeSetRelationshipAttribute {
  attributeId: number;
  setId: number;
}

export interface RelationshipAttributeTextValue {
  attributeId: number;
  textValue: string | null;
}

export interface RelationshipAttributeType {
  childOrder: Generated<number>;
  description: string | null;
  id: Generated<number>;
  lastUpdated: Generated<Timestamp>;
  name: string;
  parent: number | null;
  root: number;
}

export interface RelationshipSet {
  id: Generated<number>;
}

export interface RelationshipSetRelationship {
  relationshipId: number;
  setId: number;
}

export interface RelationshipType {
  childOrder: Generated<number>;
  deprecated: Generated<boolean>;
  description: string;
  id: Generated<number>;
  label: string;
  linkPhrase: string;
  parentId: number | null;
  reverseLinkPhrase: string;
  sourceEntityType: EntityType;
  targetEntityType: EntityType;
}

export interface RelationshipTypeAttributeType {
  attributeType: number;
  lastUpdated: Generated<Timestamp>;
  max: number | null;
  min: number | null;
  relationshipType: number;
}

export interface ReleaseEvent {
  areaId: number | null;
  day: number | null;
  id: Generated<number>;
  month: number | null;
  year: number | null;
}

export interface ReleaseEventSet {
  id: Generated<number>;
}

export interface ReleaseEventSetReleaseEvent {
  releaseEventId: number;
  setId: number;
}

export interface Revision {
  authorId: number;
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  isMerge: Generated<boolean>;
}

export interface RevisionParent {
  childId: number;
  parentId: number;
}

export interface Series {
  aliasSetId: number | null;
  annotationId: number | null;
  bbid: string | null;
  dataId: Generated<number | null>;
  defaultAliasId: number | null;
  disambiguation: string | null;
  disambiguationId: number | null;
  entityType: EntityType | null;
  identifierSetId: number | null;
  master: boolean | null;
  name: string | null;
  orderingTypeId: Generated<number | null>;
  relationshipSetId: number | null;
  revisionId: number | null;
  sortName: string | null;
  type: EntityType | null;
}

export interface SeriesData {
  aliasSetId: number;
  annotationId: number | null;
  disambiguationId: number | null;
  entityType: EntityType;
  id: Generated<number>;
  identifierSetId: number | null;
  orderingTypeId: number;
  relationshipSetId: number | null;
}

export interface SeriesHeader {
  bbid: string;
  masterRevisionId: number | null;
}

export interface SeriesImport {
  aliasSetId: number | null;
  annotationId: number | null;
  bbid: string | null;
  dataId: number | null;
  defaultAliasId: number | null;
  disambiguation: string | null;
  disambiguationId: number | null;
  entityType: EntityType | null;
  identifierSetId: number | null;
  master: boolean | null;
  name: string | null;
  orderingTypeId: number | null;
  relationshipSetId: number | null;
  revisionId: number | null;
  sortName: string | null;
  type: EntityType | null;
}

export interface SeriesImportHeader {
  bbid: string;
  dataId: number;
}

export interface SeriesOrderingType {
  id: Generated<number>;
  label: string;
}

export interface SeriesRevision {
  bbid: string;
  dataId: number | null;
  id: number;
  isMerge: Generated<boolean>;
}

export interface TitleType {
  description: string;
  id: Generated<number>;
  title: string;
}

export interface TitleUnlock {
  editorId: number;
  id: Generated<number>;
  titleId: number;
  unlockedAt: Generated<Timestamp>;
}

export interface UserCollection {
  createdAt: Generated<Timestamp>;
  description: Generated<string>;
  entityType: EntityType;
  id: Generated<string>;
  lastModified: Generated<Timestamp>;
  name: string;
  ownerId: number;
  public: Generated<boolean>;
}

export interface UserCollectionCollaborator {
  collaboratorId: number;
  collectionId: string;
}

export interface UserCollectionItem {
  addedAt: Generated<Timestamp>;
  bbid: string;
  collectionId: string;
}

export interface Work {
  aliasSetId: number | null;
  annotationId: number | null;
  bbid: string | null;
  dataId: Generated<number | null>;
  defaultAliasId: number | null;
  disambiguation: string | null;
  disambiguationId: number | null;
  identifierSetId: number | null;
  languageSetId: number | null;
  master: boolean | null;
  name: string | null;
  relationshipSetId: number | null;
  revisionId: number | null;
  sortName: string | null;
  type: EntityType | null;
  typeId: Generated<number | null>;
  workType: string | null;
}

export interface WorkData {
  aliasSetId: number;
  annotationId: number | null;
  disambiguationId: number | null;
  id: Generated<number>;
  identifierSetId: number | null;
  languageSetId: number | null;
  relationshipSetId: number | null;
  typeId: number | null;
}

export interface WorkHeader {
  bbid: string;
  masterRevisionId: number | null;
}

export interface WorkImport {
  aliasSetId: number | null;
  annotationId: number | null;
  bbid: string | null;
  dataId: number | null;
  defaultAliasId: number | null;
  disambiguation: string | null;
  disambiguationId: number | null;
  identifierSetId: number | null;
  languageSetId: number | null;
  master: boolean | null;
  name: string | null;
  relationshipSetId: number | null;
  revisionId: number | null;
  sortName: string | null;
  type: EntityType | null;
  typeId: number | null;
  workType: string | null;
}

export interface WorkImportHeader {
  bbid: string;
  dataId: number;
}

export interface WorkRevision {
  bbid: string;
  dataId: number | null;
  id: number;
  isMerge: Generated<boolean>;
}

export interface WorkType {
  id: Generated<number>;
  label: string;
}

export interface DB {
  achievementType: AchievementType;
  achievementUnlock: AchievementUnlock;
  adminLog: AdminLog;
  alias: Alias;
  aliasSet: AliasSet;
  aliasSetAlias: AliasSetAlias;
  annotation: Annotation;
  author: Author;
  authorCredit: AuthorCredit;
  authorCreditName: AuthorCreditName;
  authorData: AuthorData;
  authorHeader: AuthorHeader;
  authorImport: AuthorImport;
  authorImportHeader: AuthorImportHeader;
  authorRevision: AuthorRevision;
  authorType: AuthorType;
  disambiguation: Disambiguation;
  discardVotes: DiscardVotes;
  edition: Edition;
  editionData: EditionData;
  editionFormat: EditionFormat;
  editionGroup: EditionGroup;
  editionGroupData: EditionGroupData;
  editionGroupHeader: EditionGroupHeader;
  editionGroupImport: EditionGroupImport;
  editionGroupImportHeader: EditionGroupImportHeader;
  editionGroupRevision: EditionGroupRevision;
  editionGroupType: EditionGroupType;
  editionHeader: EditionHeader;
  editionImport: EditionImport;
  editionImportHeader: EditionImportHeader;
  editionRevision: EditionRevision;
  editionStatus: EditionStatus;
  editor: Editor;
  editorLanguage: EditorLanguage;
  editorType: EditorType;
  entity: Entity;
  entityRedirect: EntityRedirect;
  externalServiceOauth: ExternalServiceOauth;
  externalSource: ExternalSource;
  identifier: Identifier;
  identifierSet: IdentifierSet;
  identifierSetIdentifier: IdentifierSetIdentifier;
  identifierType: IdentifierType;
  importMetadata: ImportMetadata;
  languageSet: LanguageSet;
  languageSetLanguage: LanguageSetLanguage;
  'musicbrainz.area': MusicbrainzArea;
  'musicbrainz.areaType': MusicbrainzAreaType;
  'musicbrainz.countryArea': MusicbrainzCountryArea;
  'musicbrainz.gender': MusicbrainzGender;
  'musicbrainz.language': MusicbrainzLanguage;
  'musicbrainz.replicationControl': MusicbrainzReplicationControl;
  note: Note;
  publisher: Publisher;
  publisherData: PublisherData;
  publisherHeader: PublisherHeader;
  publisherImport: PublisherImport;
  publisherImportHeader: PublisherImportHeader;
  publisherRevision: PublisherRevision;
  publisherSet: PublisherSet;
  publisherSetPublisher: PublisherSetPublisher;
  publisherType: PublisherType;
  relationship: Relationship;
  relationshipAttribute: RelationshipAttribute;
  relationshipAttributeSet: RelationshipAttributeSet;
  relationshipAttributeSetRelationshipAttribute: RelationshipAttributeSetRelationshipAttribute;
  relationshipAttributeTextValue: RelationshipAttributeTextValue;
  relationshipAttributeType: RelationshipAttributeType;
  relationshipSet: RelationshipSet;
  relationshipSetRelationship: RelationshipSetRelationship;
  relationshipType: RelationshipType;
  relationshipTypeAttributeType: RelationshipTypeAttributeType;
  releaseEvent: ReleaseEvent;
  releaseEventSet: ReleaseEventSet;
  releaseEventSetReleaseEvent: ReleaseEventSetReleaseEvent;
  revision: Revision;
  revisionParent: RevisionParent;
  series: Series;
  seriesData: SeriesData;
  seriesHeader: SeriesHeader;
  seriesImport: SeriesImport;
  seriesImportHeader: SeriesImportHeader;
  seriesOrderingType: SeriesOrderingType;
  seriesRevision: SeriesRevision;
  titleType: TitleType;
  titleUnlock: TitleUnlock;
  userCollection: UserCollection;
  userCollectionCollaborator: UserCollectionCollaborator;
  userCollectionItem: UserCollectionItem;
  work: Work;
  workData: WorkData;
  workHeader: WorkHeader;
  workImport: WorkImport;
  workImportHeader: WorkImportHeader;
  workRevision: WorkRevision;
  workType: WorkType;
}
